exit()
quit
exit
read "1234" :: Int
read "5" - 2
read "1234"
show 1234
:t fst
factorial 50
let factorial :: Integer -> Integer
factorial :: Integer -> Integer
clear
:t "Hello!"
:T "Hello!"
:t !
:t 1.0
:t 1
:t False
:t true
:t True
:t 't'
length triangles
triangles
trangles
triangles
let trangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a + b + c == 24]
let right trangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]
let triangles = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10]]
let triangles = [ (a,b,c) | < c- [1..10], b <- [1..10], a <- [1..10]]
let triangles = 1
[x | x <- triangles]
[x | x <- triangles, (sum [1 | _ <- x]) == 24]
[x | x <- triangles, sum [1 | _ <- x] == 24]
[x | x <- triangles, sum [1 | _ <- xs] == 24]
triangles
let triangles = [(a,b,c) | a <- [1..10], b <- [1..10], c <- [1..10], (a*a + b*b) == c*c]
let triangles = [(a,b,c) | (a*a + b*b) == c*c]
zip [1..10] (replicate 10 5)
replicate 10 5
repeat 10 5
zip [1..10] (take 10 (repeat 5))
zip [1..10] take 10 (repeat 5)
take 10 (repeat 5)
zip ([1..10] (replicate 10 5))
zip [1..10] replicate 10 5
zip ([1..10] replicate 10 5)
zip [1..5] [5,5,5,5,5]
zip ([1..10] repeat 5 5)
zip ([1..10] repeat 10 5)
zip [1..10] repeat 10 5
snd (8, 11)
fst (8, 11)
(1)
[ [x | x <- xs, even x ] | xs <- xxs]
[ [x | x < xs, even x ] | xs <- xxs]
[ [x } x < xs, even x ] | xs <- xxs]
let xxs = [[1,3,5,2,3,1,2,4,5],[1..9],[1..20]]
length' "Oriel"
length' xs = sum [2 | _ <- xs]
length' "Oriel"
length' xs = sum [1 | _ <- xs]
[ x*y | x <- [2,5,10], y <- [8,10,11]]
boomBangs [1..100]
boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
[x | x <- [50..100], mod x 7 == 3]
[x*2 | x <- [1..10], x*2 >= 12]
[x*2 | x <- [1..10]]
take 10 [2,4..10]
take 10 [2,4..]
replicate 3 'O'
replicate 3 10
take 10 (repeat 5)
take 23 (cycle "LOL ")
take 24 (cycle "LOL ")
take 10 (cycle [0,1,2])
take 24 [13,26..]
[13,26..24*13]
elem 'o' ['o','r']
elem "o" ['o','r']
[1..20]
elem ["o"] ["O","r"]
elem ["o"] ["ORIEL"]
elem ["o"] "Oriel"
elem 'o' 'Oriel'
elem 'o'
elem "o" "Oriel"
elem o "Oriel"
elem 4 [2,3,4]
elem 4 [2,3,6]
product [99,99]
sum [,1,2,3]
sum [1,2,3]
sum "oriel"
maximum "oRIEL"
maximum "Oriel"
maxium "Oriel"
maximum "oriel"
drop 2 "Oriel"
drop 5 "oriel"
take 0 "Oriel"
